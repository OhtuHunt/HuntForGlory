const AppUser = require('../../models/app_user')
const Quest = require('../../models/quest')

const authenticate = async (token) => {
	let user
    if (token === 'admin') {
        user = {
            "quests": [],
            "_id": "5a85756ef41b1a447acce08a",
            "username": "hunter",
            "email": "gyxgyx@helsinki.fi",
            "tmc_id": 25936,
            "admin": true,
            "points": 0,
            "__v": 4
        }
    } else if (token.includes('hasQuestStarted')) {
        //Because this module has to return user that is saved to mongo, we need to add the already defined and "started" quest to user
        //and we need to update the same quest in database with new user id that is generated in the process.

        //1st: send quest id with token that includes string "hasQuestStarted" and add quest id to user
        user = {
            "id": '5a85756ef41b1a447acce08a',
            "tmc_id": 25936,
            "username": 'hunter',
            "points": 0,
            "email": 'gyxgyx@helsinki.fi',
            "admin": false,
            "quests":
                [{
                    _id: '5a981abbabd1a43cd4055f7b',
                    quest: token.substring(16),
                    startTime: '2018-03-01T15:22:35.445Z',
                    finishTime: null
                }]
        }

        //2nd: save the new user with correct quest id to test database
        const newUser = new AppUser(user)

        //3rd: update the quest to have the new user id generated by mongo
        await Quest.findByIdAndUpdate(token.substring(16),
            {   
                usersStarted: [{
                    _id: '5a981abbabd1a43cd4055f7c',
                    user: newUser._id,
                    startTime: '2018-03-01T15:22:35.445Z',
                    finishTime: null
                }]
            })

        return newUser

    } else if (token.includes('hasQuestFinished')) {
        //Again, return new database user and add its id to the quest that's in token
        user = {
            "id": '5a85756ef41b1a447acce08a',
            "tmc_id": 25936,
            "username": 'hunter',
            "points": 0,
            "email": 'gyxgyx@helsinki.fi',
            "admin": false,
            "quests":
                [{
                    _id: '5a981abbabd1a43cd4055f7b',
                    quest: token.substring(17),
                    startTime: '2018-03-01T15:22:35.445Z',
                    finishTime:  '2018-03-01T16:24:37.445Z'
                }]
        }

        const newUser = new AppUser(user)

        await Quest.findByIdAndUpdate(token.substring(17),
            {   
                usersStarted: [{
                    _id: '5a981abbabd1a43cd4055f7c',
                    user: newUser._id,
                    startTime: '2018-03-01T15:22:35.445Z',
                    finishTime:  '2018-03-01T16:24:37.445Z'
                }]
            })

        return newUser
	
	} else if (token.includes('userWithId')) {
		const userId = token.substring(11)
		const user = await AppUser.findById(userId)

		return user

	} else if (token.includes('userIdAndQuestId')) {
		const userId = token.substring(17, token.indexOf(','))
		const questId = token.substring(token.indexOf(',') + 1)

		const user = await AppUser.findById(userId)
		
		await Quest.findByIdAndUpdate(questId,
            {   
                usersStarted: [{
                    _id: '5a981abbabd1a43cd4055f7c',
                    user: user._id,
                    startTime: '2018-03-01T15:22:35.445Z',
                    finishTime: null
                }]
            })
		const quest = await Quest.findById(questId)

		return user
    } else {
        user = {
            "quests": [],
            "_id": "5a85756ef41b1a447acce08a",
            "username": "hunter",
            "email": "gyxgyx@helsinki.fi",
            "tmc_id": 25936,
            "admin": false,
            "points": 0,
            "__v": 4
        }
    }
    const newUser = new AppUser(user)
    return newUser
}

module.exports = { authenticate }